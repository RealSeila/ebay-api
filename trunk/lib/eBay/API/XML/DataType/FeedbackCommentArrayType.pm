#!/usr/bin/perl

package eBay::API::XML::DataType::FeedbackCommentArrayType;

use strict;
use warnings;  

##########################################################################
#
# Module: ............... <user defined location>eBay/API/XML
# File: ................. FeedbackCommentArrayType.pm
# Generated by: ......... genEBayApiDataTypes.pl
#
##########################################################################  

=head1 NAME

eBay::API::XML::DataType::FeedbackCommentArrayType

=head1 DESCRIPTION

Contains one or more stored comments for use as feedback to buyers.



=head1 SYNOPSIS

=cut


=head1 INHERITANCE

eBay::API::XML::DataType::FeedbackCommentArrayType inherits from the L<eBay::API::XML::BaseDataType> class

=cut

use eBay::API::XML::BaseDataType;
our @ISA = ("eBay::API::XML::BaseDataType");



my @gaProperties = ( [ 'StoredCommentText', 'xs:string', '1', '', '' ]
                    );
push @gaProperties, @{eBay::API::XML::BaseDataType::getPropertiesList()};

my @gaAttributes = ( 
                    );
push @gaAttributes, @{eBay::API::XML::BaseDataType::getAttributesList()};

=head1 Subroutines:

=cut

sub new {
  my $classname = shift;
  my %args = @_;
  my $self = $classname->SUPER::new(%args);
  return $self;
}

sub isScalar {
   return 0; 
}



=head2 setStoredCommentText()

This comment is for use as feedback for buyers. No more than ten (10) 
comments can be stored.

  Calls: SetSellingManagerFeedbackOptions
  RequiredInput: Yes

#    Argument: reference to an array  
                      of 'xs:string'

=cut

sub setStoredCommentText {
  my $self = shift;
  $self->{'StoredCommentText'} = 
		$self->convertArray_To_RefToArrayIfNeeded(@_);
}

=head2 getStoredCommentText()

#    Returns: reference to an array  
                      of 'xs:string'

=cut

sub getStoredCommentText {
  my $self = shift;
  return $self->_getDataTypeArray('StoredCommentText');
}





##  Attribute and Property lists
sub getPropertiesList {
   my $self = shift;
   return \@gaProperties;
}

sub getAttributesList {
   my $self = shift;
   return \@gaAttributes;
}



1;   
