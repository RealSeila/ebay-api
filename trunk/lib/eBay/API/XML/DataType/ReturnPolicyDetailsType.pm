#!/usr/bin/perl

package eBay::API::XML::DataType::ReturnPolicyDetailsType;

use strict;
use warnings;  

##########################################################################
#
# Module: ............... <user defined location>eBay/API/XML
# File: ................. ReturnPolicyDetailsType.pm
# Generated by: ......... genEBayApiDataTypes.pl
#
##########################################################################  

=head1 NAME

eBay::API::XML::DataType::ReturnPolicyDetailsType

=head1 DESCRIPTION

Type for the return policy details of an item.



=head1 SYNOPSIS

=cut


=head1 INHERITANCE

eBay::API::XML::DataType::ReturnPolicyDetailsType inherits from the L<eBay::API::XML::BaseDataType> class

=cut

use eBay::API::XML::BaseDataType;
our @ISA = ("eBay::API::XML::BaseDataType");

use eBay::API::XML::DataType::RefundDetailsType;
use eBay::API::XML::DataType::ReturnsAcceptedDetailsType;
use eBay::API::XML::DataType::ReturnsWithinDetailsType;
use eBay::API::XML::DataType::ShippingCostPaidByDetailsType;
use eBay::API::XML::DataType::WarrantyDurationDetailsType;
use eBay::API::XML::DataType::WarrantyOfferedDetailsType;
use eBay::API::XML::DataType::WarrantyTypeDetailsType;


my @gaProperties = ( [ 'Description', 'xs:boolean', '', '', '' ]
	, [ 'EAN', 'xs:boolean', '', '', '' ]
	, [ 'Refund', 'ns:RefundDetailsType', '1'
	     ,'eBay::API::XML::DataType::RefundDetailsType', '1' ]
	, [ 'ReturnsAccepted', 'ns:ReturnsAcceptedDetailsType', '1'
	     ,'eBay::API::XML::DataType::ReturnsAcceptedDetailsType', '1' ]
	, [ 'ReturnsWithin', 'ns:ReturnsWithinDetailsType', '1'
	     ,'eBay::API::XML::DataType::ReturnsWithinDetailsType', '1' ]
	, [ 'ShippingCostPaidBy', 'ns:ShippingCostPaidByDetailsType', '1'
	     ,'eBay::API::XML::DataType::ShippingCostPaidByDetailsType', '1' ]
	, [ 'WarrantyDuration', 'ns:WarrantyDurationDetailsType', '1'
	     ,'eBay::API::XML::DataType::WarrantyDurationDetailsType', '1' ]
	, [ 'WarrantyOffered', 'ns:WarrantyOfferedDetailsType', '1'
	     ,'eBay::API::XML::DataType::WarrantyOfferedDetailsType', '1' ]
	, [ 'WarrantyType', 'ns:WarrantyTypeDetailsType', '1'
	     ,'eBay::API::XML::DataType::WarrantyTypeDetailsType', '1' ]
                    );
push @gaProperties, @{eBay::API::XML::BaseDataType::getPropertiesList()};

my @gaAttributes = ( 
                    );
push @gaAttributes, @{eBay::API::XML::BaseDataType::getAttributesList()};

=head1 Subroutines:

=cut

sub new {
  my $classname = shift;
  my %args = @_;
  my $self = $classname->SUPER::new(%args);
  return $self;
}

sub isScalar {
   return 0; 
}



=head2 setDescription()

If true, the site supports a text description of the seller's return policy.

#    Argument: 'xs:boolean'

=cut

sub setDescription {
  my $self = shift;
  $self->{'Description'} = shift
}

=head2 isDescription()

  Calls: GeteBayDetails
  Returned: Conditionally

#    Returns: 'xs:boolean'

=cut

sub isDescription {
  my $self = shift;
  return $self->{'Description'};
}


=head2 setEAN()

If true, the site supports specifying a European Article Number (EAN) with the return policy.

#    Argument: 'xs:boolean'

=cut

sub setEAN {
  my $self = shift;
  $self->{'EAN'} = shift
}

=head2 isEAN()

  Calls: GeteBayDetails
  Returned: Conditionally

#    Returns: 'xs:boolean'

=cut

sub isEAN {
  my $self = shift;
  return $self->{'EAN'};
}


=head2 setRefund()

How the seller will compensate the buyer for a returned item 
(such as money back or exchange).

#    Argument: reference to an array  
                      of 'ns:RefundDetailsType'

=cut

sub setRefund {
  my $self = shift;
  $self->{'Refund'} = 
		$self->convertArray_To_RefToArrayIfNeeded(@_);
}

=head2 getRefund()

  Calls: GeteBayDetails
  Returned: Conditionally

#    Returns: reference to an array  
                      of 'ns:RefundDetailsType'

=cut

sub getRefund {
  my $self = shift;
  return $self->_getDataTypeArray('Refund');
}


=head2 setReturnsAccepted()

Whether the seller allows the buyer to return the item.

#    Argument: reference to an array  
                      of 'ns:ReturnsAcceptedDetailsType'

=cut

sub setReturnsAccepted {
  my $self = shift;
  $self->{'ReturnsAccepted'} = 
		$self->convertArray_To_RefToArrayIfNeeded(@_);
}

=head2 getReturnsAccepted()

  Calls: GeteBayDetails
  Returned: Conditionally

#    Returns: reference to an array  
                      of 'ns:ReturnsAcceptedDetailsType'

=cut

sub getReturnsAccepted {
  my $self = shift;
  return $self->_getDataTypeArray('ReturnsAccepted');
}


=head2 setReturnsWithin()

Time period within which the buyer can return the item, starting from the day they receive the item.

#    Argument: reference to an array  
                      of 'ns:ReturnsWithinDetailsType'

=cut

sub setReturnsWithin {
  my $self = shift;
  $self->{'ReturnsWithin'} = 
		$self->convertArray_To_RefToArrayIfNeeded(@_);
}

=head2 getReturnsWithin()

  Calls: GeteBayDetails
  Returned: Conditionally

#    Returns: reference to an array  
                      of 'ns:ReturnsWithinDetailsType'

=cut

sub getReturnsWithin {
  my $self = shift;
  return $self->_getDataTypeArray('ReturnsWithin');
}


=head2 setShippingCostPaidBy()

The party who pays the shipping cost for a returned item.

#    Argument: reference to an array  
                      of 'ns:ShippingCostPaidByDetailsType'

=cut

sub setShippingCostPaidBy {
  my $self = shift;
  $self->{'ShippingCostPaidBy'} = 
		$self->convertArray_To_RefToArrayIfNeeded(@_);
}

=head2 getShippingCostPaidBy()

  Calls: GeteBayDetails
  Returned: Conditionally

#    Returns: reference to an array  
                      of 'ns:ShippingCostPaidByDetailsType'

=cut

sub getShippingCostPaidBy {
  my $self = shift;
  return $self->_getDataTypeArray('ShippingCostPaidBy');
}


=head2 setWarrantyDuration()

The length of the warranty offered.

#    Argument: reference to an array  
                      of 'ns:WarrantyDurationDetailsType'

=cut

sub setWarrantyDuration {
  my $self = shift;
  $self->{'WarrantyDuration'} = 
		$self->convertArray_To_RefToArrayIfNeeded(@_);
}

=head2 getWarrantyDuration()

  Calls: GeteBayDetails
  Returned: Conditionally

#    Returns: reference to an array  
                      of 'ns:WarrantyDurationDetailsType'

=cut

sub getWarrantyDuration {
  my $self = shift;
  return $self->_getDataTypeArray('WarrantyDuration');
}


=head2 setWarrantyOffered()

Whether the item includes a warranty.

#    Argument: reference to an array  
                      of 'ns:WarrantyOfferedDetailsType'

=cut

sub setWarrantyOffered {
  my $self = shift;
  $self->{'WarrantyOffered'} = 
		$self->convertArray_To_RefToArrayIfNeeded(@_);
}

=head2 getWarrantyOffered()

  Calls: GeteBayDetails
  Returned: Conditionally

#    Returns: reference to an array  
                      of 'ns:WarrantyOfferedDetailsType'

=cut

sub getWarrantyOffered {
  my $self = shift;
  return $self->_getDataTypeArray('WarrantyOffered');
}


=head2 setWarrantyType()

The type of warranty offered.

#    Argument: reference to an array  
                      of 'ns:WarrantyTypeDetailsType'

=cut

sub setWarrantyType {
  my $self = shift;
  $self->{'WarrantyType'} = 
		$self->convertArray_To_RefToArrayIfNeeded(@_);
}

=head2 getWarrantyType()

  Calls: GeteBayDetails
  Returned: Conditionally

#    Returns: reference to an array  
                      of 'ns:WarrantyTypeDetailsType'

=cut

sub getWarrantyType {
  my $self = shift;
  return $self->_getDataTypeArray('WarrantyType');
}





##  Attribute and Property lists
sub getPropertiesList {
   my $self = shift;
   return \@gaProperties;
}

sub getAttributesList {
   my $self = shift;
   return \@gaAttributes;
}



1;   
